sprplot=function(rt, word.position, cond, dataframe, errbar=TRUE, whisker=.015, cex.pch=1,   	
		 		 pch.col=NULL, conf.level=.95, args.errbar=NULL, xlab=NULL, ylab=NULL, cex.lab=NULL,
                 main=NULL, cex.main=NULL,text=NULL, cex.text=NULL, args.text=NULL, type="b", 
                 lty=NULL, col=NULL, pch=NULL, legend=TRUE, args.legend=NULL, axes=TRUE, xaxis.names.line=NULL,
                 args.xaxis=NULL, args.yaxis=NULL,col.axis="transparent", x=NULL, ylim, xaxp, 
                 bg.col=gray(0.92), args.bg.col=NULL,grid.col="white", horiz.grid=TRUE, args.grid=NULL, box.col="black", box.lwd=0.5, mar=NULL,output=TRUE,...){
  if(type=="l") pch=NA
  if(missing(dataframe)) stop("Missing the data object")
  if(missing(rt)) stop("Missing the reading time column")
  else if(is.null(dataframe[rt])) stop("The column does not exist.")
  if(missing(word.position)) stop("Missing the word position column")
  else if(is.null(dataframe[word.position])) stop("The column does not exist.")
  if(conf.level <= 0 | conf.level >= 1) stop("A value between 0 and 1 is required")
    else conf.level<-1-(1-conf.level)/2
  rt<-as.vector(dataframe[[rt]])
  ylab<-if(is.null(ylab)) "y" else ylab 
  wp<-as.vector(dataframe[[word.position]])
  if(missing(cond)) cond=rep(1, nrow(dataframe))
  else cond<-as.vector(apply(cbind(dataframe[cond]), 1, paste, collapse="."))
  uniq.c<-sort(unique(cond))
  nc<-length(uniq.c)
  uniq.p<-sort(unique(wp))
  np<-length(uniq.p)
  xvals<-if(is.null(x)) 1:np else x
  if(length(grep( "at",names(args.text)))==0){
  	if(is.list(text)) text<-if(sum(lapply(text, length)==np) != length(text)) NULL else text
  	if(is.vector(text)&!is.list(text)) text<-if(length(text) != np) NULL else text
  }
  if(missing(xaxp))
    xaxp<-if(np==1) c(1,1,1) else if(np>1 & np <=20) c(1,np,np-1) else if(np>20) c(1,np,5)
  lty<-if(is.null(lty)) 1 else lty
  col<-if(is.null(col)) 1 else col
  pch<-if(is.null(pch)) 20 else pch
  avg<-t(tapply(rt, list(cond, wp), mean))
  if(errbar){
   se<-t(tapply(rt, list(cond, wp), sd)/sqrt(tapply(rt, list(cond, wp), length)))
      cilo<-avg-qnorm(conf.level)*se
      cihi<-avg+qnorm(conf.level)*se
  }else  cilo<-cihi<-avg
  ylim<-if(missing(ylim)) range(na.omit(c(cilo,cihi))) else ylim
  if(!is.null(mar) & length(mar)==4) par(mar=mar)
  add=F
  if(!is.null(bg.col)){
    matplot(x=xvals, y=avg, axes=FALSE, ylim=ylim, xlab="", ylab=ylab, 
              cex.lab=cex.lab, type="n",main=main, cex.main=cex.main,...)
    xycoord<-as.list(par("usr")[c(1,3,2,4)])
    args.bg.col<-if(is.null(args.bg.col) | !is.list(args.bg.col)) list(col=bg.col, border=NA)
                 else if(is.list(args.bg.col)) c(col=bg.col, border=NA, args.bg.col)
    do.call(rect, c(xycoord, args.bg.col))
    add=T
  }
  if(!is.null(grid.col)){
    if(!add)
      matplot(x=xvals, y=avg, axes=FALSE, ylim=ylim, xlab="", ylab=ylab, 
              cex.lab=cex.lab, type="n",main=main, cex.main=cex.main,...)
    if(horiz.grid){ 
      args.grid<-if(!is.null(args.grid) & !is.list(args.grid)) list(col=grid.col) 
                 else c(col=grid.col, modifyList(list(h=pretty(ylim), lwd=0.8, lty=1), 
                                                 if(is.null(args.grid)) list() else args.grid))
      do.call(abline, args.grid)
    }
    if(!horiz.grid){
      args.grid<-if(is.null(args.grid)|!is.list(args.grid)) list(col=grid.col)
                 else c(col=grid.col, modifyList(list(lwd=0.8, lty=1), args.grid))
      do.call(grid, args.grid)
    }
  }
  if(!is.null(box.col) & axes)
    box(col=box.col, lwd=box.lwd)
  args.matplot<-list(x=xvals, y=avg, ylim=ylim, type = type, xaxp = xaxp,
                    xlab="", ylab = ylab, pch = pch, cex.lab = cex.lab, cex=cex.pch,
                    main=main, lty = lty, col = col, col.axis = col.axis, bg=pch.col,
                    axes=axes, add=add,...)
  if(!is.null(args.xaxis) & axes){
    if(!is.null(text)){
      if(!is.null(args.text)) if(sum(grepl("at", names(args.text))==1)){ text.at=TRUE } else {text.at=FALSE}
      else text.at=FALSE
      do.call(axis, modifyList(list(side=1, labels=FALSE, tck=-0.02,
                                    at=if(text.at) args.text[["at"]] else if (length(xvals)>20) pretty(xvals)
                                    else xvals , ...), args.xaxis))
    }else do.call(axis, modifyList(list(side=1, tck=-0.02,at=if(length(xvals)>20) pretty(xvals) else xvals, xaxp=xaxp,...), args.xaxis))
  }else if(axes){
    if(!is.null(text)){
      if(!is.null(args.text)) {
      	if(sum(grepl("at", names(args.text))==1)) text.at=TRUE
      	else text.at=FALSE
      	axis(1, at=if(text.at) args.text[["at"]] else if(length(xvals)>20) pretty(xvals) else xvals, 
           	 labels=FALSE,xaxp=xaxp, tck=-0.02,...)
      }
    } else axis(1, at=if(length(xvals)>20) pretty(xvals)  else xvals, xaxp=xaxp, tck=-0.02,...)
  } 
  if(!is.null(args.yaxis) & axes)
    do.call(axis, modifyList(list(side=2, tck=-0.02,las=1, xaxp=xaxp,...), args.yaxis))
  else if(axes) axis(2, tck=-0.02, las=1, xaxp=xaxp,...)
  if(!is.null(text)){
    text.n<-if(!is.list(text)) 1 else rep(1:length(text), each=np)
    text<-if(is.list(text)) unlist(split(do.call("cbind",text),np)) else text
    if(is.null(args.text)){
      if(!is.null(args.xaxis))
        if(sum(grepl("at", names(args.xaxis)))==1) args.text<-list(at=args.xaxis$at)
	if(is.null(xaxis.names.line)) diff.line=0.3
	else diff.line=1-xaxis.names.line
      args.text<-c(if(length(text.n) %% length(col)==0) 
                  list(text=text, col=rep(col, each=length(text.n)/length(col)), side=1)
                  else list(text = text, col = "black"), args.text, list(line=text.n-diff.line, at=xvals))
    }else{
      args.text<-c(text=list(text), lapply(args.text, 
                                           function(x){if(length(text.n) %% length(x)==0)
                                             x=rep(x, length(text.n)/length(x)) else x=x}))
	  if(is.null(xaxis.names.line)) diff.line=0.3
	  else diff.line=1-xaxis.names.line
      args.text = modifyList(list(side=1, line=text.n-diff.line, at=xvals, cex=cex.text), args.text)
      args.text = args.text[!sapply(args.text, is.null)]
    }
    do.call(mapply, c(mtext, args.text))
    axis(1, labels=rep("", length(args.text$at)), at=args.text$at)
  } else text.n<-1
  title(xlab=if(is.null(xlab)) "x" else xlab, line = max(text.n) + 1.5, cex.lab=cex.lab)  
  if(legend){
    args.lg.temp<-list(x="topleft", y=NULL, legend=uniq.c,
                          pch = pch, lty = lty, col = col, pt.bg=pch.col)
    args.legend<-if(is.null(args.legend)|!is.list(args.legend)) args.lg.temp 
                 else if(is.list(args.legend)) modifyList(args.lg.temp, args.legend)
    args.legend<-args.legend[!sapply(args.legend, is.null)]
    do.call("legend", args.legend)
  }
  errbars = function(xvals, cilo, cihi,whisker,
                   nc, args.errbar = NULL) {
  fixedArgs.bar = list(matlines, x=list(xvals), 
                       y=lapply(split(t(do.call("rbind", 
                       list(cihi, cilo))),1:nc),matrix, 
                       nrow=2, byrow=T))
  allArgs.bar = c(fixedArgs.bar, args.errbar)
  whisker.len = whisker*(par("usr")[2] - par("usr")[1])/2
  whiskers = rbind((xvals - whisker.len)[1,],
                   (xvals + whisker.len)[1,])
  fixedArgs.lo = list(matlines, x=list(whiskers), y=lapply(split(t(do.call("rbind", 
                      list(cilo, cilo))), 1:nc), matrix, nrow=2, byrow=T))
  allArgs.bar.lo = c(fixedArgs.lo, args.errbar)
  fixedArgs.hi = list(matlines, x=list(whiskers), y=lapply(split(t(do.call("rbind", 
                      list(cihi, cihi))), 1:nc), matrix, nrow=2, byrow=T))
  allArgs.bar.hi = c(fixedArgs.hi, args.errbar)  
  invisible(do.call(mapply, allArgs.bar))
  invisible(do.call(mapply, allArgs.bar.lo))
  invisible(do.call(mapply, allArgs.bar.hi))
}
  if(errbar){
    args.errbar.temp<-list(col=col,lty=lty,pch=20)
    args.errbar<-if(is.null(args.errbar)|!is.list(args.errbar)) args.errbar.temp
                 else if(is.list(args.errbar)) modifyList(args.errbar.temp, args.errbar)
    args.errbar<-args.errbar[!sapply(args.errbar, is.null)]
    errbars(xvals=rbind(xvals, xvals), cilo = cilo, cihi = cihi, 
            whisker = whisker, args.errbar = args.errbar, nc = nc)
}
do.call(matplot, args.matplot)
}
